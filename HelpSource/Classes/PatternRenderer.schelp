TITLE::PatternRenderer
summary::Dynamically render patterns from modules via NRT synthesis. 
categories::Libraries>CodexIan
related::Classes/Composite

DESCRIPTION::
PatternRenderer automates the rendering of audio files via link::Guides/Non-Realtime-Synthesis##NRT synthesis:: via patterns. PatternRenderer inherits from link::Classes/CodexHybrid:: and therefore can be interacted with similarly. For me on this,  see link::Guides/CodexIan::.

CLASSMETHODS::

copymethod:: CodexComposite *new

private::defaultModulesPath
private::makeTemplates


INSTANCEMETHODS::

private::initPatternRenderer
private::makeTemplates

method::render
argument::duration
Time in seconds of the audio to render. 
argument::normalize
A boolean that specifies whether or not the rendered file should be normalized.

method::renderN
argument::n
An integer specifying how many audio files to render.
argument::duration
Time in seconds of the audio to render.
argument::normalize
A boolean that specifies whether or not the rendered file should be normalized.

method::stop
Stops a render in progress.
private::stopRenderN
private::stopRender

method::reset
Resets the rendering process if an error occurred in the middle of it and it got stuck. 

method::isRendering
returns::Boolean (true or false) if the rendering process is engaged.

private::prIsRendering
private::isRenderingN

copymethod:: CodexIncrementer -fileTemplate
copymethod:: CodexIncrementer -folder
private::folder
private::fileTemplate
method::server
Gets and sets a reference to a server. 

method::options
Gets the link::Classes/ServerOptions:: that are used to format and render the audio file. 
method::normalizeFolder 
Normalizes the audio in the the target folder to the level set by the argument. 
method::clearFolder
Deletes all of the files within the target folder. Be careful with this one. 
private::checkFolder
private::incrementer
private::getScore
private::prepareToRender
private::prRender
private::cleanUp
private::renderMessage
private::initHybrid
private::processSynthDefs
private::removeSynthDefs

EXAMPLES::
Making a single render is easy:
code:: 
p = PatternRenderer.new; 
p.render(8); 
::
The code for making many renders is similar:
code::
p = PatternRenderer.new; 
p.renderN(8, 8);
::
Rendering different patterns or code is easy: 
code::
p = PatternRenderer.new(\experimental, \default); 
//If you want, rewrite the modules in the \experimental directory 
//and then run the following. 
//Note that one can use streams to control durations.
p.renderN(8, Pexprand(0.5, 16.0, inf).asStream); 
::
It is possible to switch between module types to make different renders. 
code:: 
p = PatternRenderer.new(\experimental, \default); 
//(Note that one can use functions to control durations.)
p.renderN(8, {exprand(0.5, 16.0)});

p.moduleName_(\default); 
p.renderN(8, Pseq([1, 2, 3, 2, 1], inf).asStream);
::
